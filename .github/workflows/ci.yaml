name: CI

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened, edited]
    branches:
      - master
    paths:
      - '**/*.go'
jobs:
    check:
        name: Golang Check
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-go@v5
              with:
                  go-version-file: go.mod
                  cache: false
            - name: Install golangci-lint
              run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.57.0
            - name: Run linter
              run: make ci-lint

    unit-test:
        name: Unit test
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-go@v5
              with:
                  go-version-file: go.mod
            - run: make ci-unit-test

    version-check:
        name: Version Check on CRD Change
        runs-on: ubuntu-latest
        # Only run on pull requests
        if: github.event_name == 'pull_request'
        steps:
            - name: Checkout PR branch
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0  # Required to access full Git history
                  
            - name: Check if CRD file was changed
              id: crd_changed
              run: |
                  git fetch origin master
                  if git diff --name-only origin/master...HEAD | grep -q "redisoperator/crds/databases.spotahome.com_redisfailovers.yaml"; then
                      echo "CRD databases.spotahome.com_redisfailovers.yaml file changed"
                      echo "changed=true" >> $GITHUB_OUTPUT
                  else
                      echo "CRD databases.spotahome.com_redisfailovers.yaml file not changed"
                      echo "changed=false" >> $GITHUB_OUTPUT
                  fi
                  
            - name: Get previous tag
              id: get_previous_tag
              if: steps.crd_changed.outputs.changed == 'true'
              run: |
                  # Get the latest tag (sorted by version, not creation date)
                  previous_tag=$(git tag --sort=-version:refname | grep "Chart" | head -n 1)
                  if [[ -z "$previous_tag" ]]; then
                      echo "::warning::No tags found, using master branch as reference"
                      previous_tag="origin/master"
                  fi
                  echo "Previous tag: $previous_tag"
                  echo "tag=$previous_tag" >> $GITHUB_OUTPUT
                  
            - name: Get old and new chart versions
              id: get_versions
              if: steps.crd_changed.outputs.changed == 'true'
              run: |
                  # Get old version from previous tag or master branch
                  if [[ "${{ steps.get_previous_tag.outputs.tag }}" == "origin/master" ]]; then
                      old_version=$(git show origin/master:charts/redisoperator/Chart.yaml | grep '^version:' | awk '{print $2}')
                  else
                      old_version=$(git show ${{ steps.get_previous_tag.outputs.tag }}:charts/redisoperator/Chart.yaml | grep '^version:' | awk '{print $2}')
                  fi
                  
                  # Get new version from current PR branch
                  if [[ ! -f "charts/redisoperator/Chart.yaml" ]]; then
                      echo "::error::Chart.yaml file not found at charts/redisoperator/Chart.yaml"
                      exit 1
                  fi
                  
                  new_version=$(grep '^version:' charts/redisoperator/Chart.yaml | awk '{print $2}')
                  
                  if [[ -z "$old_version" ]]; then
                      echo "::error::Could not determine old version"
                      exit 1
                  fi
                  
                  if [[ -z "$new_version" ]]; then
                      echo "::error::Could not determine new version"
                      exit 1
                  fi
                  
                  echo "Helm Chart - Old version: $old_version"
                  echo "Helm Chart - New version: $new_version"
                  echo "old=$old_version" >> $GITHUB_OUTPUT
                  echo "new=$new_version" >> $GITHUB_OUTPUT
                  
            - name: Validate version bump
              if: steps.crd_changed.outputs.changed == 'true'
              run: |
                  old="${{ steps.get_versions.outputs.old }}"
                  new="${{ steps.get_versions.outputs.new }}"
                  
                  echo "üîç Validating version bump:"
                  echo " Helm Chart - Previous version: $old"
                  echo " Helm Chart - Current version: $new"
                  
                  if [[ "$old" == "$new" ]]; then
                      echo "::error::Chart version was not updated when CRD file changed. Found version: $new"
                      echo "::error::Please increment the version in charts/redisoperator/Chart.yaml"
                      exit 1
                  fi
                  
                  # Parse versions to validate proper increment
                  IFS='.' read -ra OLD_VER <<< "$old"
                  IFS='.' read -ra NEW_VER <<< "$new"
                  
                  old_major=${OLD_VER[0]}
                  old_minor=${OLD_VER[1]}
                  old_patch=${OLD_VER[2]}
                  
                  new_major=${NEW_VER[0]}
                  new_minor=${NEW_VER[1]}
                  new_patch=${NEW_VER[2]}
                  
                  # Check if it's a valid increment (patch, minor, or major)
                  valid_increment=false
                  
                  if [[ $new_major -gt $old_major ]]; then
                      valid_increment=true
                      echo "‚úÖ Major version increment detected ($old ‚Üí $new)"
                  elif [[ $new_major -eq $old_major && $new_minor -gt $old_minor ]]; then
                      valid_increment=true
                      echo "‚úÖ Minor version increment detected ($old ‚Üí $new)"
                  elif [[ $new_major -eq $old_major && $new_minor -eq $old_minor && $new_patch -gt $old_patch ]]; then
                      valid_increment=true
                      echo "‚úÖ Patch version increment detected ($old ‚Üí $new)"
                  fi
                  
                  if [[ "$valid_increment" == "false" ]]; then
                      echo "::error::Invalid version increment from $old to $new"
                      echo "::error::Version should be incremented (patch: x.x.+1, minor: x.+1.0, or major: +1.0.0)"
                      exit 1
                  fi
                  
                  echo "‚úÖ Chart version was correctly updated from $old to $new"
                  
            - name: Skip version check
              if: steps.crd_changed.outputs.changed == 'false'
              run: |
                  echo "‚úÖ CRD file was not changed, skipping version validation"

    integration-test:
        name: Integration test
        runs-on: ubuntu-latest
        needs: [check, unit-test]
        strategy:
            matrix:
                kubernetes: [1.27.3, 1.28.13, 1.29.8, 1.30.4, 1.31.0, 1.32.0, 1.33.0]
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-go@v5
              with:
                  go-version-file: go.mod
            - name: Install conntrack
              run: sudo apt-get install -y conntrack
            - uses: medyagh/setup-minikube@latest
              with:
                  kubernetes-version: ${{ matrix.kubernetes }}
                  minikube-version: 1.36.0
                  driver: none
            - name: Add redisfailover CRD
              run: kubectl create -f manifests/databases.spotahome.com_redisfailovers.yaml
            - run: make ci-integration-test

    chart-test:
        name: Chart testing
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Install Helm
              uses: azure/setup-helm@v4
              with:
                  version: v3.12.3

            - name: Helm test
              run: make helm-test
