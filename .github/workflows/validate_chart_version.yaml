name: Check Version Bump on CRD Change

on:
  pull_request:
    paths:
      - 'redisoperator/crds/databases.spotahome.com_redisfailovers.yaml'
      - 'redis-operator/charts/redisoperator/Chart.yaml'

jobs:
  check-crd-and-version:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required to access full Git history
          
      - name: Check if CRD file was changed
        id: crd_changed
        run: |
          git fetch origin main
          if git diff --name-only origin/main...HEAD | grep -q "redisoperator/crds/databases.spotahome.com_redisfailovers.yaml"; then
            echo "CRD file changed"
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "CRD file not changed"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Get previous tag
        id: get_previous_tag
        if: steps.crd_changed.outputs.changed == 'true'
        run: |
          # Get the latest tag (sorted by version, not creation date)
          previous_tag=$(git tag --sort=-version:refname | head -n 1)
          if [[ -z "$previous_tag" ]]; then
            echo "::warning::No tags found, using main branch as reference"
            previous_tag="origin/main"
          fi
          echo "Previous tag: $previous_tag"
          echo "tag=$previous_tag" >> $GITHUB_OUTPUT
          
      - name: Get old and new chart versions
        id: get_versions
        if: steps.crd_changed.outputs.changed == 'true'
        run: |
          # Get old version from previous tag or main branch
          if [[ "${{ steps.get_previous_tag.outputs.tag }}" == "origin/main" ]]; then
            old_version=$(git show origin/main:redis-operator/charts/redisoperator/Chart.yaml | grep '^version:' | awk '{print $2}')
          else
            old_version=$(git show ${{ steps.get_previous_tag.outputs.tag }}:redis-operator/charts/redisoperator/Chart.yaml | grep '^version:' | awk '{print $2}')
          fi
          
          # Get new version from current PR branch
          if [[ ! -f "redis-operator/charts/redisoperator/Chart.yaml" ]]; then
            echo "::error::Chart.yaml file not found at redis-operator/charts/redisoperator/Chart.yaml"
            exit 1
          fi
          
          new_version=$(grep '^version:' redis-operator/charts/redisoperator/Chart.yaml | awk '{print $2}')
          
          if [[ -z "$old_version" ]]; then
            echo "::error::Could not determine old version"
            exit 1
          fi
          
          if [[ -z "$new_version" ]]; then
            echo "::error::Could not determine new version"
            exit 1
          fi
          
          echo "Old version: $old_version"
          echo "New version: $new_version"
          echo "old=$old_version" >> $GITHUB_OUTPUT
          echo "new=$new_version" >> $GITHUB_OUTPUT
          
      - name: Validate version bump
        if: steps.crd_changed.outputs.changed == 'true'
        run: |
          old="${{ steps.get_versions.outputs.old }}"
          new="${{ steps.get_versions.outputs.new }}"
          
          echo "üîç Validating version bump:"
          echo "  Previous version: $old"
          echo "  Current version: $new"
          
          if [[ "$old" == "$new" ]]; then
            echo "::error::Chart version was not updated when CRD file changed. Found version: $new"
            echo "::error::Please increment the version in redis-operator/charts/redisoperator/Chart.yaml"
            exit 1
          fi
          
          # Parse versions to validate proper increment (optional enhanced validation)
          IFS='.' read -ra OLD_VER <<< "$old"
          IFS='.' read -ra NEW_VER <<< "$new"
          
          old_major=${OLD_VER[0]}
          old_minor=${OLD_VER[1]}
          old_patch=${OLD_VER[2]}
          
          new_major=${NEW_VER[0]}
          new_minor=${NEW_VER[1]}
          new_patch=${NEW_VER[2]}
          
          # Check if it's a valid increment (patch, minor, or major)
          valid_increment=false
          
          if [[ $new_major -gt $old_major ]]; then
            valid_increment=true
            echo "‚úÖ Major version increment detected ($old ‚Üí $new)"
          elif [[ $new_major -eq $old_major && $new_minor -gt $old_minor ]]; then
            valid_increment=true
            echo "‚úÖ Minor version increment detected ($old ‚Üí $new)"
          elif [[ $new_major -eq $old_major && $new_minor -eq $old_minor && $new_patch -gt $old_patch ]]; then
            valid_increment=true
            echo "‚úÖ Patch version increment detected ($old ‚Üí $new)"
          fi
          
          if [[ "$valid_increment" == "false" ]]; then
            echo "::error::Invalid version increment from $old to $new"
            echo "::error::Version should be incremented (patch: x.x.+1, minor: x.+1.0, or major: +1.0.0)"
            exit 1
          fi
          
          echo "‚úÖ Chart version was correctly updated from $old to $new"
          
      - name: Skip version check
        if: steps.crd_changed.outputs.changed == 'false'
        run: |
          echo "‚úÖ CRD file was not changed, skipping version validation"