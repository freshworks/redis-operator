// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	context "context"

	redisfailoverv1 "github.com/freshworks/redis-operator/api/redisfailover/v1"
	scheme "github.com/freshworks/redis-operator/client/k8s/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// RedisFailoversGetter has a method to return a RedisFailoverInterface.
// A group's client should implement this interface.
type RedisFailoversGetter interface {
	RedisFailovers(namespace string) RedisFailoverInterface
}

// RedisFailoverInterface has methods to work with RedisFailover resources.
type RedisFailoverInterface interface {
	Create(ctx context.Context, redisFailover *redisfailoverv1.RedisFailover, opts metav1.CreateOptions) (*redisfailoverv1.RedisFailover, error)
	Update(ctx context.Context, redisFailover *redisfailoverv1.RedisFailover, opts metav1.UpdateOptions) (*redisfailoverv1.RedisFailover, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*redisfailoverv1.RedisFailover, error)
	List(ctx context.Context, opts metav1.ListOptions) (*redisfailoverv1.RedisFailoverList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *redisfailoverv1.RedisFailover, err error)
	RedisFailoverExpansion
}

// redisFailovers implements RedisFailoverInterface
type redisFailovers struct {
	*gentype.ClientWithList[*redisfailoverv1.RedisFailover, *redisfailoverv1.RedisFailoverList]
}

// newRedisFailovers returns a RedisFailovers
func newRedisFailovers(c *DatabasesV1Client, namespace string) *redisFailovers {
	return &redisFailovers{
		gentype.NewClientWithList[*redisfailoverv1.RedisFailover, *redisfailoverv1.RedisFailoverList](
			"redisfailovers",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *redisfailoverv1.RedisFailover { return &redisfailoverv1.RedisFailover{} },
			func() *redisfailoverv1.RedisFailoverList { return &redisfailoverv1.RedisFailoverList{} },
		),
	}
}
